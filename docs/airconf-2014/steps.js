// Generated by CoffeeScript 1.7.1
var snippets;

snippets = {
  ".text.html": {
    "Step 1: Add <script> tags": {
      prefix: "s1",
      part: 1,
      body: "\n<!-- SCRIPTS -->\n<script src='../lib/knockout.js'></script>\n<script src='../lib/lodash.js'></script>\n<!-- plugins -->\n<script src='../lib/knockout-projections.js'></script>\n<script src='../lib/knockout.punches.js'></script>\n<!-- Some data -->\n<script src='../data/hosd.js'></script>\n<!-- Our javascript (we'll be editing) -->\n<script src=\"./my.js\"></script>"
    },
    "Step 3: Add a bound list to the screen": {
      prefix: "s3",
      part: 2,
      body: "<h1>List of State defaults</h1>\n\n<ul data-bind='foreach: defaults'>\n  <li>\n    <span data-bind='text: year'></span>\n  </li>\n</ul>"
    },
    "Step 4: Switch to {{ }} interpolation from ko.punches": {
      prefix: "s4",
      part: 2,
      body: "<b>{{ year }}</b> {{ state }}"
    },
    "Step 6: Add grepping": {
      prefix: "s6",
      part: 3,
      body: "<input type='text' data-bind='textInput: grep'/>"
    },
    "Step 10: Change to a web component": {
      prefix: "s10",
      part: 4,
      body: "<state-default params=\"data: $data\"></state-default>"
    },
    "Step 12: Add state-default-template <template>": {
      prefix: "s12",
      part: 4,
      body: "<b>{{ year }}</b> {{ state }}"
    },
    "Step 13: Uh oh - Change state template to a <tr>": {
      prefix: "s13",
      part: 5,
      body: "<table>\n  <thead>\n    <th> Year </th> <th> State </th> <th> Comment </th>\n  </thead>\n  <tbody data-bind='foreach: defaults'>\n    <state-default-tr params=\"data: $data\"></state-default-tr>\n  </tbody>\n</table>\n\n<template id='state-default-tr-template'>\n  <tr>\n    <td> {{ year }} </td> <td> {{ state }} </td> <td> {{ comment }} </td>\n  </tr>\n</template>",
      prefix: "s15",
      part: 5,
      body: "<table>\n  <thead>\n    <th> Year </th> <th> State </th> <th> Comment </th>\n  </thead>\n  <tbody data-bind='foreach: defaults'>\n    <tr data-bind='component: {\n        name: \"state-default-tr\", params: {data: $data} }'>\n    </tr>\n  </tbody>\n</table>\n\n<template id='state-default-tr-template'>\n  <td> {{ year }} </td> <td> {{ state }} </td> <td> {{ comment }} </td>\n</template>"
    },
    "Step 16: Add sort-by html": {
      prefix: "s16",
      part: 6,
      body: "<div class='sort'>\n  Sort by ({{ sort_by()|default:\"unsorted\" }}):<br/>\n  <button data-bind='click: sort_click'>None</button>\n  <button data-bind='click: sort_click'>State</button>\n  <button data-bind='click: sort_click'>Year</button>\n</div>"
    }
  },
  ".source.js": {
    "Step 2: Add KO to my.js": {
      prefix: "s2",
      part: 1,
      body: "var view = {\n  defaults: window.hosd\n};\n\nko.applyBindings(view);"
    },
    "Step 5: Enable punches": {
      prefix: "s5",
      part: 2,
      body: "ko.punches.enableAll();"
    },
    "Step 7: Use projections to filter the view": {
      prefix: "s7",
      part: 3,
      body: "function filter(item) {\n  if (!view.grep()) {\n    return true;\n  }\n  return (item.year + \" \" + item.state).toLowerCase()\n    .indexOf(view.grep().toLowerCase()) >= 0;\n}\n\nvar view = {\n  grep: ko.observable(),\n};\n\nview.defaults = ko.observableArray(window.hosd).filter(filter);"
    },
    "Step 8: Use rate limit to improve performance": {
      prefix: "s8",
      part: 3,
      body: "grep: ko.observable().extend({rateLimit: 200}),"
    },
    "Step 9: Registering a knockout component for state-default": {
      prefix: "s9",
      part: 4,
      body: "ko.components.register(\"state-default\", {\n  viewModel: function(params) {\n    this.year = params.data.year || \"unknown\";\n    this.state = params.data.state;\n    this.comment = params.data.comment;\n  },\n  template: \"<b>{{ year }}</b> {{ state }}\"\n});"
    },
    "Step 11: Change the template to an element-by-reference": {
      prefix: "s11",
      part: 4,
      body: "template: {element: \"state-default-template\"}"
    },
    "Step 14: Change ko.component to <tr>/row": {
      prefix: "s14",
      part: 5,
      body: "ko.components.register(\"state-default-tr\", {\n  viewModel: function(params) {\n    this.year = params.data.year || \"unknown\";\n    this.state = params.data.state;\n    this.comment = params.data.comment;\n  },\n  template: {element: \"state-default-tr-template\"}\n});"
    },
    "Step 17: Add sort-by and results to the view": {
      prefix: "s17",
      part: 6,
      body: "var view = {\n  grep: ko.observable().extend({rateLimit: 200}),\n  sort_by: ko.observable(),\n  sort_click: function (vm, evt) {\n    view.sort_by(evt.target.innerText);\n  }\n};\n\nvar unsorted_defaults = ko.observableArray(window.hosd)\n  .filter(filter)\n  .extend({rateLimit: 200});\nvar sortable_defaults = ko.observableArray(unsorted_defaults());\nunsorted_defaults.subscribe(sortable_defaults)\n\nfunction year_sort(a, b) {\n  return a.year == b.year ? 0 : (a.year < b.year ? -1 : 1);\n}\n\nfunction state_sort(a, b) {\n  return a.state == b.state ? 0 : (a.state < b.state ? -1 : 1);\n}\n\nview.defaults = ko.computed(function () {\n  var sort_by = view.sort_by();\n  var items = sortable_defaults();\n  if (!sort_by || sort_by == 'None') {\n    return items;\n  }\n  return items.sort(sort_by == 'State' ? state_sort : year_sort)\n});"
    },
    "Step 19: Uh-oh erratic results": {
      prefix: "s19",
      part: 6,
      body: "var view = {\n  grep: ko.observable().extend({rateLimit: 200}),\n  sort_by: ko.observable(),\n  defaults: ko.observableArray(),\n  sort_click: function (vm, evt) {\n    view.sort_by(evt.target.innerText);\n  },\n};\n\nvar unsorted_defaults = ko.observableArray(window.hosd).filter(filter);\n\nfunction year_sort(a, b) {\n  return a.year == b.year ? 0 : (a.year < b.year ? -1 : 1);\n}\n\nfunction state_sort(a, b) {\n  return a.state == b.state ? 0 : (a.state < b.state ? -1 : 1);\n}\n\nfunction sort_defaults_fn() {\n  var sort_by = view.sort_by();\n  var items = unsorted_defaults().concat();\n  if (!sort_by || sort_by == 'None') {\n    view.defaults(items);\n  }\n  view.defaults(items.sort(sort_by == 'State' ? state_sort : year_sort))\n}\nvar sort_defaults = _.debounce(sort_defaults_fn, 200);\n\nunsorted_defaults.subscribe(sort_defaults);\nview.sort_by.subscribe(sort_defaults);\nsort_defaults();"
    },
    "Step 20: Knowing when not to .filter": {
      prefix: "s20",
      part: 6,
      body: "var view = {\n  grep: ko.observable().extend({rateLimit: 200}),\n  sort_by: ko.observable(),\n  sort_click: function (vm, evt) {\n    view.sort_by(evt.target.innerText);\n  },\n};\n\nfunction year_sort(a, b) {\n  x = _.parseInt(a.year);\n  y = _.parseInt(b.year);\n  return x == y ? 0 : (x < y ? -1 : 1);\n}\n\nfunction state_sort(a, b) {\n  return a.state == b.state ? 0 : (a.state < b.state ? -1 : 1);\n}\n\nfunction compute_defaults() {\n  var items = _(window.hosd)\n    .filter(filter)\n    .value();\n\n  if (view.sort_by() == 'State') {\n    items.sort(state_sort);\n  } else if (view.sort_by()) {\n    items.sort(year_sort);\n  }\n\n  return items;\n}\n\nview.defaults = ko.computed(compute_defaults);"
    }
  }
};
